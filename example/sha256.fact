export void init(
    secret mut uint32[8] state
) {
    state[0] = 0x6a09e667;
    state[1] = 0xbb67ae85;
    state[2] = 0x3c6ef372;
    state[3] = 0xa54ff53a;
    state[4] = 0x510e527f;
    state[5] = 0x9b05688c;
    state[6] = 0x1f83d9ab;
    state[7] = 0x5be0cd19;
}

public uint32 padded_len (public uint32 l) {
    //we need 1 byte for the extra bit and 8 bytes for L
    return ((l + 9 + 63) / 64) * 64;
}

export public uint32 pad(
    secret mut uint8[] src, 
    public uint32 l
) {
    assume(l < len src);
    public uint32 target_len = ((l + 9 + 63) / 64) * 64;
    if(len src < target_len) {
        return 0;
    }

    for(uint32 i from l to target_len) {
        src[i] = 0;
    }

    src[l] = 0x80;

    public uint64 bitlen = uint64(l) * 8;

    assume(target_len > 8);
    for(uint32 i from 0 to 8) {
        src[target_len - 1 - i] = uint8(bitlen >> (i * 8));
    }

    return 1;
}

export void transform(
    secret uint8[] src,
    public uint32 nchunks,
    secret mut uint32[8] dest
) {
    init(dest);

    secret mut uint8[256] w = zeros(256);
    for(uint32 i from 0 to nchunks) {
        public uint32 start = i * 64;

        for(uint32 j from 0 to 64) {
            public uint32 dest = (j / 4) * 4 + (3 - (j % 4));
            assume(dest < 256);
            assume(start + j < len src);
            w[dest] = src[start + j];
        }

        for(uint32 j from 16 to 64) {
            uint32_t s0 = rotr(w[i-15], 7) ^ rotr(w[i-15], 18) ^ (w[i-15] >> 3);
            uint32_t s1 = rotr(w[i-2], 17) ^ rotr(w[i-2], 19) ^ (w[i-2] >> 10);
            w[i] = w[i-16] + s0 + w[i-7] + s1;
        }
    }
}